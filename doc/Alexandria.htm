<!doctype xhtml public "-//w3c//dtd xhtml 4.0 transitional//en" >
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>Alexandria Library Application Design</title>
		<style type="text/css">
			H1 { font-weight: bold; font-size: 20pt; font-family: Helvetica,Tahoma,Arial,Geneva,Sans-Serif; }
			H2 { font-weight: bold; font-size: 14pt; font-family: Helvetica,Tahoma,Arial,Geneva,Sans-Serif; }
			BODY, DIV.default { display: block; font-size: 10pt; font-family: Arial; background-color: lightblue; color: black;}
			TABLE.default { float: left; margin: 8px; background-color: lightgray; color: darkblue; border-width: 1px; border-style: solid; padding: none; border-color: darkblue; }
			TD.title { font-weight: bold; font-size: 10pt; font-family: Tahoma; background-color: lightgray; color: darkblue; }
			TD.header_left { background-color: darkgray; color: white; }
			TD.header_right { background-color: darkblue; color: white; }
			TD.entry_left { color: black; }
			TD.note { border-top-width: 1px;  border-top-style: solid; border-top-color: darkblue; }
			.otherNote { color: black; font-size: 8pt; font-family: Tahoma,Arial,Geneva,Sans-Serif; }
			.code { color: black; font-size: 10pt; font-family: Courier; background-color: white; }
			.code_keyword { color: blue; font-size: 10pt; font-family: Courier; background-color: white; }
			.code_class { color: gray; font-size: 10pt; font-family: Courier; background-color: white; }
		</style>
	</head>
	<body>
		<form action="">
		<h1>Alexandria Library Application Design</h1>
		<p>Alexandria is a cross-platform application suite for discovering, organizing, viewing, reviewing and adding metadata to digital media.</p>
		<h2>Architecture</h2>
		<p>Alexandria is designed around a dynamic plugin model that minimizes the interdependence of the constituant parts. This allows plugin modules 
		to be designed against a common API and with minimal external dependencies.  Because of this focus on independence between plugin modules it is 
		possible for even core functionality such as the playback engine to be swapped out without (necessarily) impacting the overall functionality of 
		the sytem.  Additionally, plugin modules use a capability model to communicate what features and options they support so it can be made clear to 
		then end user the what the functional differences are between two plugins of the same type.  Fundamental to the design of Alexandria is the 
		client-server model such that an Alexandria client can access media resources both locally and remotely; from ad-hoc distributed providers such 
		as internet radio stations as well as other Alexandria users who can serve their media to others.  In this regard an Alexandria client has the 
		potention to act as both a client and a server.
		</p>		
		<h2>Framework</h2>
		<div class="default">Alexandria is based on version 2.0 of the .NET framework which means that plugin modules can be written in any language which 
		targets version 2.0 of the .NET CLR.  Alexandria can be compiled and run against the Mono and Microsoft .NET runtimes.  The languages that can be used
		to write plugin modules depend on the runtime that is used.
		<table class="default">
			<tr><td colspan="3" class="title">Table 1: Framework Language Support</td></tr>
			<tr><td class="header_right">Language</td><td class="header_right">Mono 1.2</td><td class="header_right">.NET 2.0</td></tr>
			<tr><td>C#</td><td>full</td><td>full</td></tr>
			<tr><td>VB.NET</td><td>partial*</td><td>full</td></tr>
			<tr><td>IronPython</td><td>full</td><td>full</td></tr>
			<tr><td>Boo</td><td>full</td><td>none</td></tr>
			<tr><td colspan="3" class="note">* VB.NET is still experimental/incomplete in Mono 1.2</td></tr>
		</table>
		This table illustrates the CLR languages that can be used to write Alexandria plugins against Mono and Microsoft .NET and the version of the runtime that
		is required. For example, C# can be used to write plugins against Mono version 1.2 or version 2.0 of the .NET runtime. This table is by no means exhaustive and work continues
		on adding support for various languages to both Mono and .NET. Be sure to check the appropriate links in the resources section to see if your language of choice is supported.
		</div>
		<h2>Plugin Types</h2>
		<div class="default">Plugin modules provide all of the functionality in Alexandria. A single plugin can provide multiple different functions within the Alexandria application suite. Each of
		the different plugin types provides functions for handling media resources.  Media resources are the most fundamental piece of the Alexandria application; digital audio files,
		compact discs, metadata tags, reviews, and user ratings are all media resources.  Thus it is important to think about the various plugin types in terms of what they do with
		the various media resource types.  The following table gives an overview of the functions that each plugin type provides:
		<table class="default" style="float: center">
			<tr><td colspan="5" class="title">Table 2: Plugin Interfaces</td></tr>
			<tr><td class="header_right">Plugin Interface</td><td class="header_right">Input Interface</td><td class="header_right">Output Interface</td><td class="header_right">Notes</td><td class="header_right">Links</td></tr>
			<tr><td>IAudioPlugin</td><td>IAudioResource</td><td>N/A</td><td>Takes an audio resource and plays it</td><td><a target="_blank" href="http://fmod.org">FMOD</a></td></tr>
			<tr><td>IVideoPlugin</td><td>IVideoResource</td><td>N/A</td><td>Takes a video resource and plays it</td><td><a target="_blank" href="http://taoframework.com">The Tao Framework</a></td></tr>
			<tr><td>IImagePlugin</td><td>IImageResource</td><td>N/A</td><td>Takes an image resource and displays it</td><td><a target="_blank" href="http://freeimage.sourceforge.net/">FreeImage</a></td></tr>
			<tr><td>ITextPlugin</td><td>ITextResource</td><td>N/A</td><td>Takes a text resource and displays it</td><td></td></tr>
			<tr><td>IStoragePlugin</td><td>IStorable</td><td>N/A</td><td>Takes a storable resource and saves it to the specified storage medium</td><td><a target="_blank" href="http://www.db4o.com">db4o</a>, <a target="_blank" href="http://sqlite.org">SQLite</a></td></tr>
			<tr><td>ISearchPlugin</td><td>ISearch</td><td>ISearchResult</td><td>Takes a search query and returns a search result</td><td><a target="_blank" href="http://www.amazon.com">Amazon</a>, <a target="_blank" href="http://www.imdb.com">IMDB</a>, <a target="_blank" href="http://musicbrainz.org">MusicBrainz</a></td></tr>
			<tr><td>ISubmissionPlugin</td><td>ISubmission</td><td>ISubmissionResult</td><td>Takes a submission query and returns a submission result</td><td><a target="_blank" href="http://www.last.fm">Last.fm</a></tr>
			<tr><td>IIdentifierPlugin</td><td>System.Uri</td><td>IResource</td><td>Takes a uri and returns a resource</td><td></td></tr>
			<tr><td>IConverterPlugin</td><td>IResource</td><td>IResource</td><td>Takes a resource and returns a resource with a different resource type</td><td></td></tr>
			<tr><td>IDefinitionPlugin</td><td>N/A</td><td>ResourceFormat</td><td>Defines a resurce type</td><td></td></tr>
		</table>
		</div>
		<h2>Resource Types</h2>
		<div class="default">There is a set of standard interfaces that resources implement depending on how they can be accessed. All resource interfaces all inherit from IResource.  Here is the definition of IResource:<br/><br/>
		<div class="code_keyword">
		public interface <span class="code_class">IResource</span><br/>
		{<br/>
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">Uri</span><span class="code"> Uri { </span><span class="code_keyword">get</span><span class="code">; }</span><br/>
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">ResourceFormat</span><span class="code"> Format { </span><span class="code_keyword">get</span><span class="code">; }</span><br/>
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">IDictionary</span><span class="code">&lt;</span>object<span class="code">,</span> IResource<span class="code">&gt;</span><span class="code"> Resources { </span><span class="code_keyword">get</span><span class="code">; }</span><br/>
		}<br/>
		</div><br/>
		The following table illustrates the standard resource types:
		<table class="default">
			<tr><td colspan="3" class="title">Table 3: Resource Types</td></tr>
			<tr><td class="header_right">Resource Interface</td><td class="header_right">Properties</td><td class="header_right">Methods</td></tr>
			<tr><td>IAudio</td><td>Milliseconds, Position, Status</td><td>Load, Play, Pause, Stop, Seek</td></tr>
		</table>
		<h2>Resource Lifecycle</h2>
		<div class="default">In Alexandria resources have a lifecycle:<ol><li>Get Uri (search/open)</li><li>Identify Resource</li><li>Validate Resource (optional)</li><li>Render/Edit/Convert/Submit Resource</li><li>Store Resource (optional)</li><li>Close Resource</li></ol></div>
		</form>
	</body>
</html>