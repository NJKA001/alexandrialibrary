<!doctype xhtml public "-//w3c//dtd xhtml 4.0 transitional//en" >
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>Alexandria Library Application Design</title>
		<style type="text/css">
			H1 { font-weight: bold; font-size: 20pt; font-family: Helvetica,Tahoma,Arial,Geneva,Sans-Serif; }
			H2 { font-weight: bold; font-size: 14pt; font-family: Helvetica,Tahoma,Arial,Geneva,Sans-Serif; }
			BODY, DIV { display: block; font-size: 10pt; font-family: Arial; background-color: lightblue; color: black;}
			TABLE { float: left; margin: 8px; background-color: lightgray; color: darkblue; border-width: 1px; border-style: solid; padding: none; border-color: darkblue; }
			TH.title { font-weight: bold; font-size: 10pt; font-family: Tahoma; background-color: lightgray; color: darkblue; }
			TH { background-color: darkblue; color: white; }
			TH.alternate { background-color: darkgray; color: white; }
			TD { color: black; }
			TD.note { border-top-width: 1px;  border-top-style: solid; border-top-color: darkblue; }
			.otherNote { color: black; font-size: 8pt; font-family: Tahoma,Arial,Geneva,Sans-Serif; }
			.code { color: black; font-size: 10pt; font-family: "Courier New", Courier, Monospace; background-color: white; }
			.code_keyword { color: blue; font-size: 10pt; font-family: "Courier New", Courier, Monospace; background-color: white; }
			.code_class { color: gray; font-size: 10pt; font-family: "Courier New", Courier, Monospace; background-color: white; }
		</style>
	</head>
	<body>
		<form action="">
		<h1>Alexandria Library Application Design</h1>
		<p>Alexandria is a cross-platform application suite for discovering, organizing, viewing, reviewing and adding metadata to digital media.</p>
		<h2>Architecture</h2>
		<p>Alexandria is designed around a dynamic plugin model that minimizes the interdependence of the constituant parts. This allows plugin modules 
		to be designed against a common API and with minimal external dependencies.  Because of this focus on independence between plugin modules it is 
		possible for even core functionality such as the playback engine to be swapped out without (necessarily) impacting the overall functionality of 
		the sytem.  Additionally, plugin modules use a capability model to communicate what features and options they support so it can be made clear to 
		then end user the what the functional differences are between two plugins of the same type.  Fundamental to the design of Alexandria is the 
		client-server model such that an Alexandria client can access media resources both locally and remotely; from ad-hoc distributed providers such 
		as internet radio stations as well as other Alexandria users who can serve their media to others.  In this regard an Alexandria client has the 
		potention to act as both a client and a server.
		</p>		
		<h2>Framework</h2>
		<div>Alexandria is based on version 2.0 of the .NET framework which means that plugin modules can be written in any language which 
		targets version 2.0 of the .NET CLR.  Alexandria can be compiled and run against the Mono and Microsoft .NET runtimes.  The languages that can be used
		to write plugin modules depend on the runtime that is used.
		<table>
			<tr><th colspan="3" class="title">Table 1: Framework Language Support</th></tr>
			<tr><th>Language</th><th>Mono 1.2</th><th>.NET 2.0</th></tr>
			<tr><td>C#</td><td>full</td><td>full</td></tr>
			<tr><td>VB.NET</td><td>partial*</td><td>full</td></tr>
			<tr><td>IronPython</td><td>full</td><td>full</td></tr>
			<tr><td>Boo</td><td>full</td><td>none</td></tr>
			<tr><td colspan="3" class="note">* VB.NET is still experimental/incomplete in Mono 1.2</td></tr>
		</table>
		This table illustrates the CLR languages that can be used to write Alexandria plugins against Mono and Microsoft .NET and the version of the runtime that
		is required. For example, C# can be used to write plugins against Mono version 1.2 or version 2.0 of the .NET runtime. This table is by no means exhaustive and work continues
		on adding support for various languages to both Mono and .NET. Be sure to check the appropriate links in the resources section to see if your language of choice is supported.
		</div>
		<h2>Plugin Types</h2>
		<div>Plugin modules provide all of the functionality in Alexandria. A single plugin can provide multiple different functions within the Alexandria application suite. Each of
		the different plugin types provides functions for handling media resources.  Media resources are the most fundamental piece of the Alexandria application; digital audio files,
		compact discs, metadata tags, reviews, and user ratings are all media resources.  Thus it is important to think about the various plugin types in terms of what they do with
		the various media resource types.  The following table gives an overview of the functions that each plugin type provides:
		<table>
			<tr><th colspan="5" class="title">Table 2: Plugin Interfaces</th></tr>
			<tr><th>Plugin Interface</th><th>Input Interface</th><th>Output Interface</th><th>Notes</th><th>Links</th></tr>
			<tr><td>IAudioFactory</td><td>N/A</td><td>IAudio</td><td>Instantiates an audio resource</td><td><a target="_blank" href="http://fmod.org">FMOD</a></td></tr>
			<tr><td>IMediaContainerFactory</td><td>N/A</td><td>IMediaContainer</td><td>Instantiates a media container resource</td><td><a target="_blank" href="http://taoframework.com">The Tao Framework</a></td></tr>
			<tr><td>IImageFactory</td><td>N/A</td><td>IImage</td><td>Instantiates an image resource</td><td><a target="_blank" href="http://freeimage.sourceforge.net/">FreeImage</a></td></tr>
			<tr><td>ITextFactory</td><td>N/A</td><td>IText</td><td>Instantiates a text resource</td><td></td></tr>
			<tr><td>IMetadataFactory</td><td>N/A</td><td>IMetadata</td><td>Instantiates a metadata resource</td><td></td></tr>
			<tr><td>IReaderFactory</td><td>N/A</td><td>IReader</td><td>Instantiates a reader (for searches, filtering, etc.)</td><td><a target="_blank" href="http://www.amazon.com">Amazon</a>, <a target="_blank" href="http://www.imdb.com">IMDB</a>, <a target="_blank" href="http://musicbrainz.org">MusicBrainz</a>, <a target="_blank" href="http://www.db4o.com">db4o</a>, <a target="_blank" href="http://sqlite.org">SQLite</a></td></tr>
			<tr><td>IWriterFactory</td><td>N/A</td><td>IWriter</td><td>Instantiates a writer (for submissions, updates, etc.)</td><td><a target="_blank" href="http://www.last.fm">Last.fm</a>, <a target="_blank" href="http://www.db4o.com">db4o</a>, <a target="_blank" href="http://sqlite.org">SQLite</a></td></tr>
			<tr><td>ICommandFactory</td><td>IList&lt;ICommandOption&gt;</td><td>ResourceCommand</td><td>Takes a list of command options and returns a resource command delegate</td><td></td></tr>
			<tr><td>IConverterFactory</td><td>N/A</td><td>IResource</td><td>Instantiates a resource with the requested resource format</td><td></td></tr>
			<tr><td>IFormatRespository</td><td>N/A</td><td>ResourceFormat</td><td>A repository of resource format definitions</td><td></td></tr>
		</table>
		</div>
		<h2>Resource Types</h2>
		<div>There is a set of standard interfaces that resources implement depending on how they can be accessed. All resource interfaces all inherit from IResource.  Here is the resource interface hierarchy in Alexandria starting with IResource:</div><br/>
		<div class="code">
		<span class="code_keyword">public interface </span><span class="code_class">IResource</span><br />{<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">Uri</span> Uri {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">ResourceFormat</span> Format {<span class="code_keyword">get</span>;}<br />}<br /><br />		
		<span class="code_keyword">public interface </span><span class="code_class">IMediaContainer</span> : <span class="code_class">IResource</span><br />{<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">MediaCapabilities</span> MediaCapabilities {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">IList</span>&lt;<span class="code_class">IAudio</span>&gt; Audio {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">IList</span>&lt;<span class="code_class">IVideo</span>&gt; Video {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">IList</span>&lt;<span class="code_class">IImage</span>&gt; Image {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">IList</span>&lt;<span class="code_class">IText</span>&gt; Text {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">IList</span>&lt;<span class="code_class">IMetadata</span>&gt; Metadata {<span class="code_keyword">get</span>;}<br />}<br /><br />
		<span class="code_keyword">public interface </span><span class="code_class">IPlayable</span> : <span class="code_class">IResource</span><br />{<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">void </span> Play();<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">void </span> Pause();<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">void </span> Stop();<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">void </span> Seek(<span class="code_keyword">int </span>position)<br />}<br /><br />
		<span class="code_keyword">public interface </span><span class="code_class">IAudio</span> : <span class="code_class">IPlayable</span><br />{<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">AudioCapabilities</span> AudioCapabilities {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">int </span> Volume {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">int </span> Balance {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">int </span> Treble {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">int </span> Bass {<span class="code_keyword">get</span>;}<br />}<br /><br />
		<span class="code_keyword">public interface </span><span class="code_class">IVisual</span> : <span class="code_class">IResource</span><br />{<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">int </span> Brightness {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">int </span> Contrast {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">int </span> Hue {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_keyword">int </span> Saturation {<span class="code_keyword">get</span>;}<br />}<br /><br />
		<span class="code_keyword">public interface </span><span class="code_class">IVideo</span> : <span class="code_class">IVisual, IPlayable</span><br />{<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">VideoCapabilities</span> VideoCapabilities {<span class="code_keyword">get</span>;}<br />}<br /><br />
		<span class="code_keyword">public interface </span><span class="code_class">IImage</span> : <span class="code_class">IVisual</span><br />{<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">ImageCapabilities</span> ImageCapabilities {<span class="code_keyword">get</span>;}<br />}<br /><br />
		<span class="code_keyword">public interface </span><span class="code_class">IText</span> : <span class="code_class">IResource</span><br />{<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">TextCapabilities</span> TextCapabilities {<span class="code_keyword">get</span>;}<br />}<br /><br />
		<span class="code_keyword">public interface </span><span class="code_class">IMetadata</span> : <span class="code_class">IResource</span><br />{<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">MetadataCapabilities</span> MetadataCapabilities {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">IList</span>&lt;<span class="code_keyword">string</span>&gt; TextData {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">IList</span>&lt;<span class="code_keyword">int</span>&gt; IntegerData {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">IList</span>&lt;<span class="code_keyword">double</span>&gt; FloatData {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">IList</span>&lt;<span class="code_keyword">decimal</span>&gt; DecimalData {<span class="code_keyword">get</span>;}<br />
		&nbsp;&nbsp;&nbsp;&nbsp;<span class="code_class">IList</span>&lt;<span class="code_keyword">DateTime</span>&gt; DateData {<span class="code_keyword">get</span>;}<br />}<br />		
		</div>
		<br/>
		The following table illustrates the standard resource types:
		<table>
			<tr><th colspan="3" class="title">Table 3: Resource Types</th></tr>
			<tr><th>Resource Interface</th><th>Properties</th><th>Methods</th></tr>
			<tr><td>IAudio</td><td>Milliseconds, Position, Status</td><td>Load, Play, Pause, Stop, Seek</td></tr>
		</table>
		<br /><br /><br /><br /><br /><br />
		<h2>Resource Lifecycle</h2>
		<div>In Alexandria resources have a lifecycle:<ol><li>Get Uri (search/open)</li><li>Identify Resource</li><li>Validate Resource (optional)</li><li>Open Resource</li><li>Render/Edit/Convert/Submit Resource</li><li>Store Resource (optional)</li><li>Close Resource</li></ol></div>
		<h2>Ubiquitous Language</h2>
		<div>Here is a definition of the terms used in the Alexandria domain model:</div>
		<table>
			<tr><th colspan="3" class="title">Table 4: Domain Vocabulary</th></tr>
			<tr><th>Term</th><th class="header_right">Definition</th><th>Links</th></tr>
			<tr><td>Local</td><td>Located on the same machine that the Alexandria client is running on</td><td></td></tr>
			<tr><td>Remote</td><td>Located on a machine other than the one that the Alexandria client is running on</td></tr>
			<tr><td>Resource</td><td>Digital media data or metadata that is utilitized by Alexandria.<br />This can be a local file, a remote stream, a compact disc or data from a database</td><td></td></tr>
			<tr><td>File</td><td>A file element in a file system. Typically this is a local file but it can also be from a remote file system.<br />The key disction between a file and a stream is that a file allows filesystem functions such as copy, rename and delete whereas a stream is just a read-only collection of media data</td><td></td></tr>
			<tr><td>Streaming Media</td><td>Multimedia that is continuously received by,<br />and normally displayed to, the end-user whilst it is being delivered by the provider.</td><td><a href="http://en.wikipedia.org/wiki/Streaming_media#Streaming_media_technologies">Wikipedia</a></td></tr>
			<tr><td>Non-Streaming Media</td><td>Multimedia that is cached on the end user's system and can be displayed at any time of their choosing<br />Examples include local digital media files and compact discs</td><td></td></tr>
			<tr><td>On-Demand Streaming Media</td><td>Cached on a remote server for a long period of time, and available to be transmitted at a user's request<br />Examples include videos found on youtube and prerecorded podcasts</td><td></td></tr>
			<tr><td>Live Streaming Media</td><td>Only available at one particular time, streamed to the end-user in real-time.<br />Examples include television, video streams of live sporting events and live audio broadcasts offered by radio stations</td><td></td></tr>
			<tr><td>Optical Disc</td><td>Flat, circular, usually polycarbonate disc whereon data is stored in the form of pits<br />Specifically, this refers to a local non-streaming resource that typically holds audio (Compact Disc) or video (DVD) resources by may include binary data (CD-ROM)</td><td><a href="http://en.wikipedia.org/wiki/Optical_disc">Wikipedia</a></td></tr>
			<tr><td>Delivery Mechanism?</td><td>Streaming vs. Non-Streaming</td><td></td></tr>
			<tr><td>Media Format</td><td>The format that the digital data is encoded with</td><td></td></tr>
			<tr><td>Real-Time Mechanism?</td><td>Live vs. On-Demand</td><td></td></tr>
			<tr><td></td><td></td><td></td></tr>
			<tr><td></td><td></td><td></td></tr>
		</table>
		</form>
	</body>
</html>